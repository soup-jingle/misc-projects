 line   address	contents
    1                      ; Linked by DLX-LD.
    2                      ; MemSize 20480
    3                      ; Data size: 126
    4                      ; Text size: 3324
    5                      ; Stack size: 8192
    6  00000000          	.text 0x1000
    7  00001000          	.data 0x2000
    8                      ; Compiled by GCC
   10  00002000          	.align 2
   11  00002000          	LC0_LF0:
   12  00002000  53657474	.ascii "Setting number = %d\n\000"
   12  00002004  696e6720	
   12  00002008  6e756d62	
   12  0000200c  6572203d	
   12  00002010  2025640a	
   12  00002014  00      	
   13  00002015          	.align 2
   14  00002018          	LC1_LF0:
   15  00002018  55736167	.ascii "Usage: \000"
   15  0000201c  653a2000	
   16  00002020          	.align 2
   17  00002020          	LC2_LF0:
   18  00002020  206e756d	.ascii " number\n\000"
   18  00002024  6265720a	
   18  00002028  00      	
   19  00002029          	.align 2
   20  0000202c          	LC3_LF0:
   21  0000202c  436f756c	.ascii "Could not map the shared page to virtual address, exiting..\n\000"
   21  00002030  64206e6f	
   21  00002034  74206d61	
   21  00002038  70207468	
   21  0000203c  65207368	
   21  00002040  61726564	
   21  00002044  20706167	
   21  00002048  6520746f	
   21  0000204c  20766972	
   21  00002050  7475616c	
   21  00002054  20616464	
   21  00002058  72657373	
   21  0000205c  2c206578	
   21  00002060  6974696e	
   21  00002064  672e2e0a	
   21  00002068  00      	
   22  00002069          	.align 2
   23  0000206c          	LC4_LF0:
   24  0000206c  75736572	.ascii "userprog2.dlx.obj\000"
   24  00002070  70726f67	
   24  00002074  322e646c	
   24  00002078  782e6f62	
   24  0000207c  6a00    	
   25  0000207e          	.text
   26  00001000          	.align 2
   27  00001000          	.proc _main
   28  00001000          	.global _main
   29  00001000          	_main:
   30                      ;  Function 'main'; 48 bytes of locals, 0 regs to save.
   31  00001000  afbefffc	sw	-4(r29),r30; push fp
   32  00001004  001df020	add	r30,r0,r29; fp = sp
   33  00001008  afbffff8	sw	-8(r29),r31; push ret addr
   34  0000100c  2fbd0038	subui	r29,r29,#56; alloc local storage
   35  00001010  8fc20000	lw	r2,(r30)
   36  00001014  8fc30004	lw	r3,4(r30)
   37  00001018  0c000cd8	jal	___main
   38  0000101c  54000000	nop; not filled.
   39  00001020  60410002	seqi	r1,r2,#2
   40  00001024  10200050	beqz	r1,L4_LF0
   41  00001028  54000000	nop; not filled.
   42  0000102c  23bdfff0	addi	r29,r29,#-16
   43  00001030  8c630004	lw	r3,4(r3)
   44  00001034  afa30000	sw	(r29),r3
   45  00001038  20080000	addi	r8,r0,#0
   46  0000103c  afa80004	sw	4(r29),r8
   47  00001040  2008000a	addi	r8,r0,#10
   48  00001044  afa80008	sw	8(r29),r8
   49  00001048  0c0009bc	jal	_dstrtol
   50  0000104c  54000000	nop; not filled.
   51  00001050  00012820	add	r5,r0,r1
   52  00001054  3c080000	lhi	r8,((LC0_LF0)>>16)&0xffff
   53  00001058  25082000	addui	r8,r8,(LC0_LF0)&0xffff
   54  0000105c  afa80000	sw	(r29),r8
   55  00001060  afa50004	sw	4(r29),r5
   56  00001064  0c0001d0	jal	_Printf
   57  00001068  54000000	nop; not filled.
   58  0000106c  23bd0010	addi	r29,r29,#16
   59  00001070  08000048	j	L2_LF0
   60  00001074  54000000	nop; not filled.
   61  00001078          	L4_LF0:
   62  00001078  23bdfff8	addi	r29,r29,#-8
   63  0000107c  3c080000	lhi	r8,((LC1_LF0)>>16)&0xffff
   64  00001080  25082018	addui	r8,r8,(LC1_LF0)&0xffff
   65  00001084  afa80000	sw	(r29),r8
   66  00001088  0c0001ac	jal	_Printf
   67  0000108c  54000000	nop; not filled.
   68  00001090  8c630000	lw	r3,(r3)
   69  00001094  afa30000	sw	(r29),r3
   70  00001098  0c00019c	jal	_Printf
   71  0000109c  54000000	nop; not filled.
   72  000010a0  3c080000	lhi	r8,((LC2_LF0)>>16)&0xffff
   73  000010a4  25082020	addui	r8,r8,(LC2_LF0)&0xffff
   74  000010a8  afa80000	sw	(r29),r8
   75  000010ac  0c000188	jal	_Printf
   76  000010b0  54000000	nop; not filled.
   77  000010b4  0c000c30	jal	_exit
   78  000010b8  54000000	nop; not filled.
   79  000010bc          	L2_LF0:
   80  000010bc  0c00019c	jal	_shmget
   81  000010c0  54000000	nop; not filled.
   82  000010c4  00011820	add	r3,r0,r1
   83  000010c8  23bdfff8	addi	r29,r29,#-8
   84  000010cc  afa30000	sw	(r29),r3
   85  000010d0  0c000194	jal	_shmat
   86  000010d4  54000000	nop; not filled.
   87  000010d8  00011020	add	r2,r0,r1
   88  000010dc  23bd0008	addi	r29,r29,#8
   89  000010e0  64410000	snei	r1,r2,#0
   90  000010e4  14200024	bnez	r1,L6_LF0
   91  000010e8  54000000	nop; not filled.
   92  000010ec  23bdfff8	addi	r29,r29,#-8
   93  000010f0  3c080000	lhi	r8,((LC3_LF0)>>16)&0xffff
   94  000010f4  2508202c	addui	r8,r8,(LC3_LF0)&0xffff
   95  000010f8  afa80000	sw	(r29),r8
   96  000010fc  0c000138	jal	_Printf
   97  00001100  54000000	nop; not filled.
   98  00001104  0c000be0	jal	_exit
   99  00001108  54000000	nop; not filled.
  100  0000110c          	L6_LF0:
  101  0000110c  ac450000	sw	(r2),r5
  102  00001110  20080041	addi	r8,r0,(#0x41)&0xff
  103  00001114  a0480004	sb	4(r2),r8
  104  00001118  23bdfff8	addi	r29,r29,#-8
  105  0000111c  20080000	addi	r8,r0,#0
  106  00001120  afa80000	sw	(r29),r8
  107  00001124  0c00014c	jal	_sem_create
  108  00001128  54000000	nop; not filled.
  109  0000112c  00013820	add	r7,r0,r1
  110  00001130  20080005	addi	r8,r0,#5
  111  00001134  afa80000	sw	(r29),r8
  112  00001138  0c000138	jal	_sem_create
  113  0000113c  54000000	nop; not filled.
  114  00001140  00011020	add	r2,r0,r1
  115  00001144  afa30000	sw	(r29),r3
  116  00001148  23c6ffe8	addi	r6,r30,#-24
  117  0000114c  afa60004	sw	4(r29),r6
  118  00001150  0c0007a8	jal	_ditoa
  119  00001154  54000000	nop; not filled.
  120  00001158  afa70000	sw	(r29),r7
  121  0000115c  23c4ffd8	addi	r4,r30,#-40
  122  00001160  afa40004	sw	4(r29),r4
  123  00001164  0c000794	jal	_ditoa
  124  00001168  54000000	nop; not filled.
  125  0000116c  afa20000	sw	(r29),r2
  126  00001170  23c3ffc8	addi	r3,r30,#-56
  127  00001174  afa30004	sw	4(r29),r3
  128  00001178  0c000780	jal	_ditoa
  129  0000117c  54000000	nop; not filled.
  130  00001180  20020000	addi	r2,r0,#0
  131  00001184  23bd0008	addi	r29,r29,#8
  132  00001188  0045082a	slt	r1,r2,r5
  133  0000118c  10200044	beqz	r1,L8_LF0
  134  00001190  54000000	nop; not filled.
  135  00001194          	L10_LF0:
  136  00001194  23bdffe8	addi	r29,r29,#-24
  137  00001198  3c080000	lhi	r8,((LC4_LF0)>>16)&0xffff
  138  0000119c  2508206c	addui	r8,r8,(LC4_LF0)&0xffff
  139  000011a0  afa80000	sw	(r29),r8
  140  000011a4  afa60004	sw	4(r29),r6
  141  000011a8  afa40008	sw	8(r29),r4
  142  000011ac  afa3000c	sw	12(r29),r3
  143  000011b0  20080000	addi	r8,r0,#0
  144  000011b4  afa80010	sw	16(r29),r8
  145  000011b8  0c000094	jal	_process_create
  146  000011bc  54000000	nop; not filled.
  147  000011c0  23bd0018	addi	r29,r29,#24
  148  000011c4  20420001	addi	r2,r2,#1
  149  000011c8  0045082a	slt	r1,r2,r5
  150  000011cc  1420ffc4	bnez	r1,L10_LF0
  151  000011d0  54000000	nop; not filled.
  152  000011d4          	L8_LF0:
  153  000011d4  23bdfff8	addi	r29,r29,#-8
  154  000011d8  afa70000	sw	(r29),r7
  155  000011dc  0c0000a0	jal	_sem_wait
  156  000011e0  54000000	nop; not filled.
  157  000011e4  23bd0008	addi	r29,r29,#8
  158  000011e8  0c000afc	jal	_exit
  159  000011ec  54000000	nop
  160  000011f0          	.endproc _main
  161                      ;;;
  162                      ;;; Stub functions for DLX traps.
  163                      ;;;
  164                      ;;; Ethan L. Miller, 1999.  Released to the public domain.
  165                      ;;;
  166                      ;;; The traps such as Open and Close
  167                      ;;; (note the capital letters) are for use by user programs.  The traps
  168                      ;;; with names such as open and close (lower case) are for use by the OS.
  169                      ;;;
  172  000011f0          	.align 2
  174                      ;;; The following are the traps to be used by user-level programs
  175                      ;;;
  177  000011f0          	.align 2
  178  000011f0          	.proc _Open
  179  000011f0          	.global _Open
  180  000011f0          	_Open:
  181                      ;;; Note that trap #0x213 actually causes a trap vector in the OS of
  182                      ;;; 0x1213.  The same is true for other user traps.  Thus, a user trap
  183                      ;;; with trap #0x240 will result in a trap vector of 0x1240 in the OS.
  184  000011f0  44000213	trap	#0x213
  185  000011f4  4be00000	jr	r31
  186  000011f8  54000000	nop
  187  000011fc          	.endproc _Open
  189  000011fc          	.proc _Close
  190  000011fc          	.global _Close
  191  000011fc          	_Close:
  192  000011fc  44000214	trap	#0x214
  193  00001200  4be00000	jr	r31
  194  00001204  54000000	nop
  195  00001208          	.endproc _Close
  197  00001208          	.proc _Read
  198  00001208          	.global _Read
  199  00001208          	_Read:
  200  00001208  44000210	trap	#0x210
  201  0000120c  4be00000	jr	r31
  202  00001210  54000000	nop
  203  00001214          	.endproc _Read
  205  00001214          	.proc _Write
  206  00001214          	.global _Write
  207  00001214          	_Write:
  208  00001214  44000211	trap	#0x211
  209  00001218  4be00000	jr	r31
  210  0000121c  54000000	nop
  211  00001220          	.endproc _Write
  213  00001220          	.proc _Lseek
  214  00001220          	.global _Lseek
  215  00001220          	_Lseek:
  216  00001220  44000212	trap	#0x212
  217  00001224  4be00000	jr	r31
  218  00001228  54000000	nop
  219  0000122c          	.endproc _Lseek
  221  0000122c          	.proc _Putchar
  222  0000122c          	.global _Putchar
  223  0000122c          	_Putchar:
  224  0000122c  44000280	trap	#0x280
  225  00001230  4be00000	jr	r31
  226  00001234  54000000	nop
  227  00001238          	.endproc _Putchar
  229  00001238          	.proc _Printf
  230  00001238          	.global _Printf
  231  00001238          	_Printf:
  232  00001238  44000201	trap	#0x201
  233  0000123c  4be00000	jr	r31
  234  00001240  54000000	nop
  235  00001244          	.endproc _Printf
  237  00001244          	.proc _getpid
  238  00001244          	.global _getpid
  239  00001244          	_getpid:
  240  00001244  44000431	trap	#0x431
  241  00001248  4be00000	jr	r31
  242  0000124c  54000000	nop
  243  00001250          	.endproc _getpid
  245  00001250          	.proc _process_create
  246  00001250          	.global _process_create
  247  00001250          	_process_create:
  248  00001250  44000432	trap	#0x432
  249  00001254  4be00000	jr	r31
  250  00001258  54000000	nop
  251  0000125c          	.endproc _process_create
  253  0000125c          	.proc _shmget
  254  0000125c          	.global _shmget
  255  0000125c          	_shmget:
  256  0000125c  44000440	trap	#0x440
  257  00001260  4be00000	jr	r31
  258  00001264  54000000	nop
  259  00001268          	.endproc _shmget
  261  00001268          	.proc _shmat
  262  00001268          	.global _shmat
  263  00001268          	_shmat:
  264  00001268  44000441	trap	#0x441
  265  0000126c  4be00000	jr	r31
  266  00001270  54000000	nop
  267  00001274          	.endproc _shmat
  269  00001274          	.proc _sem_create
  270  00001274          	.global _sem_create
  271  00001274          	_sem_create:
  272  00001274  44000450	trap	#0x450
  273  00001278  4be00000	jr	r31
  274  0000127c  54000000	nop
  275  00001280          	.endproc _sem_create
  277  00001280          	.proc _sem_wait
  278  00001280          	.global _sem_wait
  279  00001280          	_sem_wait:
  280  00001280  44000451	trap	#0x451
  281  00001284  4be00000	jr	r31
  282  00001288  54000000	nop
  283  0000128c          	.endproc _sem_wait
  285  0000128c          	.proc _sem_signal
  286  0000128c          	.global _sem_signal
  287  0000128c          	_sem_signal:
  288  0000128c  44000452	trap	#0x452
  289  00001290  4be00000	jr	r31
  290  00001294  54000000	nop
  291  00001298          	.endproc _sem_signal
  293  00001298          	.proc _lock_create
  294  00001298          	.global _lock_create
  295  00001298          	_lock_create:
  296  00001298  44000453	trap	#0x453
  297  0000129c  4be00000	jr	r31
  298  000012a0  54000000	nop
  299  000012a4          	.endproc _lock_create
  301  000012a4          	.proc _lock_acquire
  302  000012a4          	.global _lock_acquire
  303  000012a4          	_lock_acquire:
  304  000012a4  44000454	trap	#0x454
  305  000012a8  4be00000	jr	r31
  306  000012ac  54000000	nop
  307  000012b0          	.endproc _lock_acquire
  309  000012b0          	.proc _lock_release
  310  000012b0          	.global _lock_release
  311  000012b0          	_lock_release:
  312  000012b0  44000455	trap	#0x455
  313  000012b4  4be00000	jr	r31
  314  000012b8  54000000	nop
  315  000012bc          	.endproc _lock_release
  317  000012bc          	.proc _cond_create
  318  000012bc          	.global _cond_create
  319  000012bc          	_cond_create:
  320  000012bc  44000456	trap	#0x456
  321  000012c0  4be00000	jr	r31
  322  000012c4  54000000	nop
  323  000012c8          	.endproc _cond_create
  325  000012c8          	.proc _cond_wait
  326  000012c8          	.global _cond_wait
  327  000012c8          	_cond_wait:
  328  000012c8  44000457	trap	#0x457
  329  000012cc  4be00000	jr	r31
  330  000012d0  54000000	nop
  331  000012d4          	.endproc _cond_wait
  333  000012d4          	.proc _cond_signal
  334  000012d4          	.global _cond_signal
  335  000012d4          	_cond_signal:
  336  000012d4  44000458	trap	#0x458
  337  000012d8  4be00000	jr	r31
  338  000012dc  54000000	nop
  339  000012e0          	.endproc _cond_signal
  341  000012e0          	.proc _cond_broadcast
  342  000012e0          	.global _cond_broadcast
  343  000012e0          	_cond_broadcast:
  344  000012e0  44000459	trap	#0x459
  345  000012e4  4be00000	jr	r31
  346  000012e8  54000000	nop
  347  000012ec          	.endproc _cond_broadcast
  349                      ; Compiled by GCC
  351  000012ec          	.align 2
  352  000012ec          	.proc _isspace
  353  000012ec          	.global _isspace
  354  000012ec          	_isspace:
  355                      ;  Function 'isspace'; 0 bytes of locals, 1 regs to save.
  356  000012ec  afbefffc	sw	-4(r29),r30; push fp
  357  000012f0  001df020	add	r30,r0,r29; fp = sp
  358  000012f4  afbffff8	sw	-8(r29),r31; push ret addr
  359  000012f8  2fbd0010	subui	r29,r29,#16; alloc local storage
  360  000012fc  afa20000	sw	0(r29),r2
  361  00001300  83c20003	lb	r2,3(r30)
  362  00001304  201f0000	addi	r31,r0,#0
  363  00001308  304100ff	andi	r1,r2,#0x00ff
  364  0000130c  60210020	seqi	r1,r1,#32
  365  00001310  14200018	bnez	r1,L6_LF2
  366  00001314  54000000	nop; not filled.
  367  00001318  2041fff7	addi	r1,r2,#-9
  368  0000131c  302100ff	andi	r1,r1,#0x00ff
  369  00001320  70210001	sleui	r1,r1,#1
  370  00001324  10200008	beqz	r1,L5_LF2
  371  00001328  54000000	nop; not filled.
  372  0000132c          	L6_LF2:
  373  0000132c  201f0001	addi	r31,r0,#1
  374  00001330          	L5_LF2:
  375  00001330  001f0820	add	r1,r0,r31
  376  00001334  8fa20000	lw	r2,0(r29)
  377  00001338  8fdffff8	lw	r31,-8(r30)
  378  0000133c  001ee820	add	r29,r0,r30
  379  00001340  8fdefffc	lw	r30,-4(r30)
  380  00001344  4be00000	jr	r31
  381  00001348  54000000	nop
  382  0000134c          	.endproc _isspace
  383  0000134c          	.align 2
  384  0000134c          	.proc _isxdigit
  385  0000134c          	.global _isxdigit
  386  0000134c          	_isxdigit:
  387                      ;  Function 'isxdigit'; 0 bytes of locals, 1 regs to save.
  388  0000134c  afbefffc	sw	-4(r29),r30; push fp
  389  00001350  001df020	add	r30,r0,r29; fp = sp
  390  00001354  afbffff8	sw	-8(r29),r31; push ret addr
  391  00001358  2fbd0010	subui	r29,r29,#16; alloc local storage
  392  0000135c  afa20000	sw	0(r29),r2
  393  00001360  83df0003	lb	r31,3(r30)
  394  00001364  20020000	addi	r2,r0,#0
  395  00001368  23e1ffd0	addi	r1,r31,#-48
  396  0000136c  302100ff	andi	r1,r1,#0x00ff
  397  00001370  70210009	sleui	r1,r1,#9
  398  00001374  14200028	bnez	r1,L12_LF2
  399  00001378  54000000	nop; not filled.
  400  0000137c  23e1ff9f	addi	r1,r31,#-97
  401  00001380  302100ff	andi	r1,r1,#0x00ff
  402  00001384  70210005	sleui	r1,r1,#5
  403  00001388  14200014	bnez	r1,L12_LF2
  404  0000138c  54000000	nop; not filled.
  405  00001390  33e100ff	andi	r1,r31,#0x00ff
  406  00001394  64210041	snei	r1,r1,#65
  407  00001398  14200008	bnez	r1,L11_LF2
  408  0000139c  54000000	nop; not filled.
  409  000013a0          	L12_LF2:
  410  000013a0  20020001	addi	r2,r0,#1
  411  000013a4          	L11_LF2:
  412  000013a4  00020820	add	r1,r0,r2
  413  000013a8  8fa20000	lw	r2,0(r29)
  414  000013ac  8fdffff8	lw	r31,-8(r30)
  415  000013b0  001ee820	add	r29,r0,r30
  416  000013b4  8fdefffc	lw	r30,-4(r30)
  417  000013b8  4be00000	jr	r31
  418  000013bc  54000000	nop
  419  000013c0          	.endproc _isxdigit
  420  000013c0          	.align 2
  421  000013c0          	.proc _dstrcpy
  422  000013c0          	.global _dstrcpy
  423  000013c0          	_dstrcpy:
  424                      ;  Function 'dstrcpy'; 0 bytes of locals, 2 regs to save.
  425  000013c0  afbefffc	sw	-4(r29),r30; push fp
  426  000013c4  001df020	add	r30,r0,r29; fp = sp
  427  000013c8  afbffff8	sw	-8(r29),r31; push ret addr
  428  000013cc  2fbd0010	subui	r29,r29,#16; alloc local storage
  429  000013d0  afa20000	sw	0(r29),r2
  430  000013d4  afa30004	sw	4(r29),r3
  431  000013d8  8fdf0000	lw	r31,(r30)
  432  000013dc  8fc20004	lw	r2,4(r30)
  433  000013e0  001f1820	add	r3,r0,r31
  434  000013e4          	L19_LF2:
  435  000013e4  80410000	lb	r1,(r2)
  436  000013e8  a3e10000	sb	(r31),r1
  437  000013ec  20420001	addi	r2,r2,#1
  438  000013f0  23ff0001	addi	r31,r31,#1
  439  000013f4  302100ff	andi	r1,r1,#0x00ff
  440  000013f8  64210000	snei	r1,r1,#0
  441  000013fc  1420ffe4	bnez	r1,L19_LF2
  442  00001400  54000000	nop; not filled.
  443  00001404  00030820	add	r1,r0,r3
  444  00001408  8fa20000	lw	r2,0(r29)
  445  0000140c  8fa30004	lw	r3,4(r29)
  446  00001410  8fdffff8	lw	r31,-8(r30)
  447  00001414  001ee820	add	r29,r0,r30
  448  00001418  8fdefffc	lw	r30,-4(r30)
  449  0000141c  4be00000	jr	r31
  450  00001420  54000000	nop
  451  00001424          	.endproc _dstrcpy
  452  00001424          	.align 2
  453  00001424          	.proc _dstrncpy
  454  00001424          	.global _dstrncpy
  455  00001424          	_dstrncpy:
  456                      ;  Function 'dstrncpy'; 0 bytes of locals, 3 regs to save.
  457  00001424  afbefffc	sw	-4(r29),r30; push fp
  458  00001428  001df020	add	r30,r0,r29; fp = sp
  459  0000142c  afbffff8	sw	-8(r29),r31; push ret addr
  460  00001430  2fbd0018	subui	r29,r29,#24; alloc local storage
  461  00001434  afa20000	sw	0(r29),r2
  462  00001438  afa30004	sw	4(r29),r3
  463  0000143c  afa40008	sw	8(r29),r4
  464  00001440  8fc20000	lw	r2,(r30)
  465  00001444  8fc30004	lw	r3,4(r30)
  466  00001448  8fdf0008	lw	r31,8(r30)
  467  0000144c  00022020	add	r4,r0,r2
  468  00001450  08000024	j	L37_LF2
  469  00001454  54000000	nop; not filled.
  470  00001458          	L34_LF2:
  471  00001458  80610000	lb	r1,(r3)
  472  0000145c  a0410000	sb	(r2),r1
  473  00001460  20630001	addi	r3,r3,#1
  474  00001464  20420001	addi	r2,r2,#1
  475  00001468  302100ff	andi	r1,r1,#0x00ff
  476  0000146c  64210000	snei	r1,r1,#0
  477  00001470  10200018	beqz	r1,L32_LF2
  478  00001474  54000000	nop; not filled.
  479  00001478          	L37_LF2:
  480  00001478  001f0820	add	r1,r0,r31
  481  0000147c  23ffffff	addi	r31,r31,#-1
  482  00001480  70210000	slei	r1,r1,#0
  483  00001484  1020ffd0	beqz	r1,L34_LF2
  484  00001488  54000000	nop; not filled.
  485  0000148c          	L32_LF2:
  486  0000148c  00040820	add	r1,r0,r4
  487  00001490  8fa20000	lw	r2,0(r29)
  488  00001494  8fa30004	lw	r3,4(r29)
  489  00001498  8fa40008	lw	r4,8(r29)
  490  0000149c  8fdffff8	lw	r31,-8(r30)
  491  000014a0  001ee820	add	r29,r0,r30
  492  000014a4  8fdefffc	lw	r30,-4(r30)
  493  000014a8  4be00000	jr	r31
  494  000014ac  54000000	nop
  495  000014b0          	.endproc _dstrncpy
  496  000014b0          	.align 2
  497  000014b0          	.proc _dstrcat
  498  000014b0          	.global _dstrcat
  499  000014b0          	_dstrcat:
  500                      ;  Function 'dstrcat'; 0 bytes of locals, 2 regs to save.
  501  000014b0  afbefffc	sw	-4(r29),r30; push fp
  502  000014b4  001df020	add	r30,r0,r29; fp = sp
  503  000014b8  afbffff8	sw	-8(r29),r31; push ret addr
  504  000014bc  2fbd0010	subui	r29,r29,#16; alloc local storage
  505  000014c0  afa20000	sw	0(r29),r2
  506  000014c4  afa30004	sw	4(r29),r3
  507  000014c8  8fdf0000	lw	r31,(r30)
  508  000014cc  001f1820	add	r3,r0,r31
  509  000014d0  90610000	lbu	r1,(r3)
  510  000014d4  64210000	snei	r1,r1,#0
  511  000014d8  10200018	beqz	r1,L50_LF2
  512  000014dc  54000000	nop; not filled.
  513  000014e0          	L51_LF2:
  514  000014e0  23ff0001	addi	r31,r31,#1
  515  000014e4  93e10000	lbu	r1,(r31)
  516  000014e8  64210000	snei	r1,r1,#0
  517  000014ec  1420fff0	bnez	r1,L51_LF2
  518  000014f0  54000000	nop; not filled.
  519  000014f4          	L50_LF2:
  520  000014f4  001f1020	add	r2,r0,r31
  521  000014f8  8fdf0004	lw	r31,4(r30)
  522  000014fc          	L54_LF2:
  523  000014fc  83e10000	lb	r1,(r31)
  524  00001500  a0410000	sb	(r2),r1
  525  00001504  23ff0001	addi	r31,r31,#1
  526  00001508  20420001	addi	r2,r2,#1
  527  0000150c  302100ff	andi	r1,r1,#0x00ff
  528  00001510  64210000	snei	r1,r1,#0
  529  00001514  1420ffe4	bnez	r1,L54_LF2
  530  00001518  54000000	nop; not filled.
  531  0000151c  00030820	add	r1,r0,r3
  532  00001520  8fa20000	lw	r2,0(r29)
  533  00001524  8fa30004	lw	r3,4(r29)
  534  00001528  8fdffff8	lw	r31,-8(r30)
  535  0000152c  001ee820	add	r29,r0,r30
  536  00001530  8fdefffc	lw	r30,-4(r30)
  537  00001534  4be00000	jr	r31
  538  00001538  54000000	nop
  539  0000153c          	.endproc _dstrcat
  540  0000153c          	.align 2
  541  0000153c          	.proc _dstrncmp
  542  0000153c          	.global _dstrncmp
  543  0000153c          	_dstrncmp:
  544                      ;  Function 'dstrncmp'; 0 bytes of locals, 4 regs to save.
  545  0000153c  afbefffc	sw	-4(r29),r30; push fp
  546  00001540  001df020	add	r30,r0,r29; fp = sp
  547  00001544  afbffff8	sw	-8(r29),r31; push ret addr
  548  00001548  2fbd0018	subui	r29,r29,#24; alloc local storage
  549  0000154c  afa20000	sw	0(r29),r2
  550  00001550  afa30004	sw	4(r29),r3
  551  00001554  afa40008	sw	8(r29),r4
  552  00001558  afa5000c	sw	12(r29),r5
  553  0000155c  8fc30000	lw	r3,(r30)
  554  00001560  8fc40004	lw	r4,4(r30)
  555  00001564  8fc50008	lw	r5,8(r30)
  556  00001568  20020000	addi	r2,r0,#0
  557  0000156c  0045082a	slt	r1,r2,r5
  558  00001570  1020003c	beqz	r1,L73_LF2
  559  00001574  54000000	nop; not filled.
  560  00001578          	L75_LF2:
  561  00001578  909f0000	lbu	r31,(r4)
  562  0000157c  67e10000	snei	r1,r31,#0
  563  00001580  10200038	beqz	r1,L86_LF2
  564  00001584  54000000	nop; not filled.
  565  00001588  90610000	lbu	r1,(r3)
  566  0000158c  003f0829	sne	r1,r1,r31
  567  00001590  1420001c	bnez	r1,L73_LF2
  568  00001594  54000000	nop; not filled.
  569  00001598  20630001	addi	r3,r3,#1
  570  0000159c  20840001	addi	r4,r4,#1
  571  000015a0  20420001	addi	r2,r2,#1
  572  000015a4  0045082a	slt	r1,r2,r5
  573  000015a8  1420ffcc	bnez	r1,L75_LF2
  574  000015ac  54000000	nop; not filled.
  575  000015b0          	L73_LF2:
  576  000015b0  00450828	seq	r1,r2,r5
  577  000015b4  10200010	beqz	r1,L80_LF2
  578  000015b8  54000000	nop; not filled.
  579  000015bc          	L86_LF2:
  580  000015bc  20010000	addi	r1,r0,#0
  581  000015c0  08000028	j	L84_LF2
  582  000015c4  54000000	nop; not filled.
  583  000015c8          	L80_LF2:
  584  000015c8  907f0000	lbu	r31,(r3)
  585  000015cc  90830000	lbu	r3,(r4)
  586  000015d0  03e30822	sub	r1,r31,r3
  587  000015d4  74210000	sgei	r1,r1,#0
  588  000015d8  2002ffff	addi	r2,r0,#-1
  589  000015dc  10200008	beqz	r1,L82_LF2
  590  000015e0  54000000	nop; not filled.
  591  000015e4  03e31029	sne	r2,r31,r3
  592  000015e8          	L82_LF2:
  593  000015e8  00020820	add	r1,r0,r2
  594  000015ec          	L84_LF2:
  595  000015ec  8fa20000	lw	r2,0(r29)
  596  000015f0  8fa30004	lw	r3,4(r29)
  597  000015f4  8fa40008	lw	r4,8(r29)
  598  000015f8  8fa5000c	lw	r5,12(r29)
  599  000015fc  8fdffff8	lw	r31,-8(r30)
  600  00001600  001ee820	add	r29,r0,r30
  601  00001604  8fdefffc	lw	r30,-4(r30)
  602  00001608  4be00000	jr	r31
  603  0000160c  54000000	nop
  604  00001610          	.endproc _dstrncmp
  605  00001610          	.align 2
  606  00001610          	.proc _dstrlen
  607  00001610          	.global _dstrlen
  608  00001610          	_dstrlen:
  609                      ;  Function 'dstrlen'; 0 bytes of locals, 1 regs to save.
  610  00001610  afbefffc	sw	-4(r29),r30; push fp
  611  00001614  001df020	add	r30,r0,r29; fp = sp
  612  00001618  afbffff8	sw	-8(r29),r31; push ret addr
  613  0000161c  2fbd0010	subui	r29,r29,#16; alloc local storage
  614  00001620  afa20000	sw	0(r29),r2
  615  00001624  8fdf0000	lw	r31,(r30)
  616  00001628  20020000	addi	r2,r0,#0
  617  0000162c  08000008	j	L97_LF2
  618  00001630  54000000	nop; not filled.
  619  00001634          	L95_LF2:
  620  00001634  20420001	addi	r2,r2,#1
  621  00001638          	L97_LF2:
  622  00001638  93e10000	lbu	r1,(r31)
  623  0000163c  23ff0001	addi	r31,r31,#1
  624  00001640  64210000	snei	r1,r1,#0
  625  00001644  1420ffec	bnez	r1,L95_LF2
  626  00001648  54000000	nop; not filled.
  627  0000164c  00020820	add	r1,r0,r2
  628  00001650  8fa20000	lw	r2,0(r29)
  629  00001654  8fdffff8	lw	r31,-8(r30)
  630  00001658  001ee820	add	r29,r0,r30
  631  0000165c  8fdefffc	lw	r30,-4(r30)
  632  00001660  4be00000	jr	r31
  633  00001664  54000000	nop
  634  00001668          	.endproc _dstrlen
  635  00001668          	.align 2
  636  00001668          	.proc _dstrstr
  637  00001668          	.global _dstrstr
  638  00001668          	_dstrstr:
  639                      ;  Function 'dstrstr'; 0 bytes of locals, 6 regs to save.
  640  00001668  afbefffc	sw	-4(r29),r30; push fp
  641  0000166c  001df020	add	r30,r0,r29; fp = sp
  642  00001670  afbffff8	sw	-8(r29),r31; push ret addr
  643  00001674  2fbd0020	subui	r29,r29,#32; alloc local storage
  644  00001678  afa20000	sw	0(r29),r2
  645  0000167c  afa30004	sw	4(r29),r3
  646  00001680  afa40008	sw	8(r29),r4
  647  00001684  afa5000c	sw	12(r29),r5
  648  00001688  afa60010	sw	16(r29),r6
  649  0000168c  afa70014	sw	20(r29),r7
  650  00001690  8fc50000	lw	r5,(r30)
  651  00001694  8fc70004	lw	r7,4(r30)
  652  00001698  20030000	addi	r3,r0,#0
  653  0000169c  90e10000	lbu	r1,(r7)
  654  000016a0  20e20001	addi	r2,r7,#1
  655  000016a4  64210000	snei	r1,r1,#0
  656  000016a8  1020001c	beqz	r1,L125_LF2
  657  000016ac  54000000	nop; not filled.
  658  000016b0          	L126_LF2:
  659  000016b0  20630001	addi	r3,r3,#1
  660  000016b4  90410000	lbu	r1,(r2)
  661  000016b8  20420001	addi	r2,r2,#1
  662  000016bc  64210000	snei	r1,r1,#0
  663  000016c0  1420ffec	bnez	r1,L126_LF2
  664  000016c4  54000000	nop; not filled.
  665  000016c8          	L125_LF2:
  666  000016c8  00033020	add	r6,r0,r3
  667  000016cc  080000ac	j	L149_LF2
  668  000016d0  54000000	nop; not filled.
  669  000016d4          	L130_LF2:
  670  000016d4  00051820	add	r3,r0,r5
  671  000016d8  00072020	add	r4,r0,r7
  672  000016dc  20020000	addi	r2,r0,#0
  673  000016e0  0046082a	slt	r1,r2,r6
  674  000016e4  1020003c	beqz	r1,L134_LF2
  675  000016e8  54000000	nop; not filled.
  676  000016ec          	L136_LF2:
  677  000016ec  909f0000	lbu	r31,(r4)
  678  000016f0  67e10000	snei	r1,r31,#0
  679  000016f4  10200038	beqz	r1,L150_LF2
  680  000016f8  54000000	nop; not filled.
  681  000016fc  90610000	lbu	r1,(r3)
  682  00001700  003f0829	sne	r1,r1,r31
  683  00001704  1420001c	bnez	r1,L134_LF2
  684  00001708  54000000	nop; not filled.
  685  0000170c  20630001	addi	r3,r3,#1
  686  00001710  20840001	addi	r4,r4,#1
  687  00001714  20420001	addi	r2,r2,#1
  688  00001718  0046082a	slt	r1,r2,r6
  689  0000171c  1420ffcc	bnez	r1,L136_LF2
  690  00001720  54000000	nop; not filled.
  691  00001724          	L134_LF2:
  692  00001724  00460828	seq	r1,r2,r6
  693  00001728  10200010	beqz	r1,L141_LF2
  694  0000172c  54000000	nop; not filled.
  695  00001730          	L150_LF2:
  696  00001730  20010000	addi	r1,r0,#0
  697  00001734  08000028	j	L132_LF2
  698  00001738  54000000	nop; not filled.
  699  0000173c          	L141_LF2:
  700  0000173c  90630000	lbu	r3,(r3)
  701  00001740  90820000	lbu	r2,(r4)
  702  00001744  00620822	sub	r1,r3,r2
  703  00001748  74210000	sgei	r1,r1,#0
  704  0000174c  201fffff	addi	r31,r0,#-1
  705  00001750  10200008	beqz	r1,L143_LF2
  706  00001754  54000000	nop; not filled.
  707  00001758  0062f829	sne	r31,r3,r2
  708  0000175c          	L143_LF2:
  709  0000175c  001f0820	add	r1,r0,r31
  710  00001760          	L132_LF2:
  711  00001760  64210000	snei	r1,r1,#0
  712  00001764  14200010	bnez	r1,L131_LF2
  713  00001768  54000000	nop; not filled.
  714  0000176c  00050820	add	r1,r0,r5
  715  00001770  0800001c	j	L146_LF2
  716  00001774  54000000	nop; not filled.
  717  00001778          	L131_LF2:
  718  00001778  20a50001	addi	r5,r5,#1
  719  0000177c          	L149_LF2:
  720  0000177c  90a10000	lbu	r1,(r5)
  721  00001780  64210000	snei	r1,r1,#0
  722  00001784  1420ff4c	bnez	r1,L130_LF2
  723  00001788  54000000	nop; not filled.
  724  0000178c  20010000	addi	r1,r0,#0
  725  00001790          	L146_LF2:
  726  00001790  8fa20000	lw	r2,0(r29)
  727  00001794  8fa30004	lw	r3,4(r29)
  728  00001798  8fa40008	lw	r4,8(r29)
  729  0000179c  8fa5000c	lw	r5,12(r29)
  730  000017a0  8fa60010	lw	r6,16(r29)
  731  000017a4  8fa70014	lw	r7,20(r29)
  732  000017a8  8fdffff8	lw	r31,-8(r30)
  733  000017ac  001ee820	add	r29,r0,r30
  734  000017b0  8fdefffc	lw	r30,-4(r30)
  735  000017b4  4be00000	jr	r31
  736  000017b8  54000000	nop
  737  000017bc          	.endproc _dstrstr
  738  000017bc          	.align 2
  739  000017bc          	.proc _dmindex
  740  000017bc          	.global _dmindex
  741  000017bc          	_dmindex:
  742                      ;  Function 'dmindex'; 0 bytes of locals, 5 regs to save.
  743  000017bc  afbefffc	sw	-4(r29),r30; push fp
  744  000017c0  001df020	add	r30,r0,r29; fp = sp
  745  000017c4  afbffff8	sw	-8(r29),r31; push ret addr
  746  000017c8  2fbd0020	subui	r29,r29,#32; alloc local storage
  747  000017cc  afa20000	sw	0(r29),r2
  748  000017d0  afa30004	sw	4(r29),r3
  749  000017d4  afa40008	sw	8(r29),r4
  750  000017d8  afa5000c	sw	12(r29),r5
  751  000017dc  afa60010	sw	16(r29),r6
  752  000017e0  8fc40000	lw	r4,(r30)
  753  000017e4  8fc60004	lw	r6,4(r30)
  754  000017e8  90810000	lbu	r1,(r4)
  755  000017ec  64210000	snei	r1,r1,#0
  756  000017f0  10200060	beqz	r1,L164_LF2
  757  000017f4  54000000	nop; not filled.
  758  000017f8  00012820	add	r5,r0,r1
  759  000017fc          	L165_LF2:
  760  000017fc  00061020	add	r2,r0,r6
  761  00001800  80df0000	lb	r31,(r6)
  762  00001804  33e100ff	andi	r1,r31,#0x00ff
  763  00001808  64210000	snei	r1,r1,#0
  764  0000180c  1020003c	beqz	r1,L163_LF2
  765  00001810  54000000	nop; not filled.
  766  00001814  90830000	lbu	r3,(r4)
  767  00001818          	L169_LF2:
  768  00001818  33e100ff	andi	r1,r31,#0x00ff
  769  0000181c  00610828	seq	r1,r3,r1
  770  00001820  10200010	beqz	r1,L168_LF2
  771  00001824  54000000	nop; not filled.
  772  00001828  00040820	add	r1,r0,r4
  773  0000182c  08000028	j	L173_LF2
  774  00001830  54000000	nop; not filled.
  775  00001834          	L168_LF2:
  776  00001834  20420001	addi	r2,r2,#1
  777  00001838  805f0000	lb	r31,(r2)
  778  0000183c  33e100ff	andi	r1,r31,#0x00ff
  779  00001840  64210000	snei	r1,r1,#0
  780  00001844  1420ffd0	bnez	r1,L169_LF2
  781  00001848  54000000	nop; not filled.
  782  0000184c          	L163_LF2:
  783  0000184c  14a0ffac	bnez	r5,L165_LF2
  784  00001850  54000000	nop; not filled.
  785  00001854          	L164_LF2:
  786  00001854  20010000	addi	r1,r0,#0
  787  00001858          	L173_LF2:
  788  00001858  8fa20000	lw	r2,0(r29)
  789  0000185c  8fa30004	lw	r3,4(r29)
  790  00001860  8fa40008	lw	r4,8(r29)
  791  00001864  8fa5000c	lw	r5,12(r29)
  792  00001868  8fa60010	lw	r6,16(r29)
  793  0000186c  8fdffff8	lw	r31,-8(r30)
  794  00001870  001ee820	add	r29,r0,r30
  795  00001874  8fdefffc	lw	r30,-4(r30)
  796  00001878  4be00000	jr	r31
  797  0000187c  54000000	nop
  798  00001880          	.endproc _dmindex
  799  00001880          	.align 2
  800  00001880          	.proc _dindex
  801  00001880          	.global _dindex
  802  00001880          	_dindex:
  803                      ;  Function 'dindex'; 0 bytes of locals, 2 regs to save.
  804  00001880  afbefffc	sw	-4(r29),r30; push fp
  805  00001884  001df020	add	r30,r0,r29; fp = sp
  806  00001888  afbffff8	sw	-8(r29),r31; push ret addr
  807  0000188c  2fbd0010	subui	r29,r29,#16; alloc local storage
  808  00001890  afa20000	sw	0(r29),r2
  809  00001894  afa30004	sw	4(r29),r3
  810  00001898  8fc20000	lw	r2,(r30)
  811  0000189c  8fc30004	lw	r3,4(r30)
  812  000018a0  08000024	j	L187_LF2
  813  000018a4  54000000	nop; not filled.
  814  000018a8          	L183_LF2:
  815  000018a8  33e100ff	andi	r1,r31,#0x00ff
  816  000018ac  00230828	seq	r1,r1,r3
  817  000018b0  10200010	beqz	r1,L184_LF2
  818  000018b4  54000000	nop; not filled.
  819  000018b8  00020820	add	r1,r0,r2
  820  000018bc  08000020	j	L186_LF2
  821  000018c0  54000000	nop; not filled.
  822  000018c4          	L184_LF2:
  823  000018c4  20420001	addi	r2,r2,#1
  824  000018c8          	L187_LF2:
  825  000018c8  805f0000	lb	r31,(r2)
  826  000018cc  33e100ff	andi	r1,r31,#0x00ff
  827  000018d0  64210000	snei	r1,r1,#0
  828  000018d4  1420ffd0	bnez	r1,L183_LF2
  829  000018d8  54000000	nop; not filled.
  830  000018dc  20010000	addi	r1,r0,#0
  831  000018e0          	L186_LF2:
  832  000018e0  8fa20000	lw	r2,0(r29)
  833  000018e4  8fa30004	lw	r3,4(r29)
  834  000018e8  8fdffff8	lw	r31,-8(r30)
  835  000018ec  001ee820	add	r29,r0,r30
  836  000018f0  8fdefffc	lw	r30,-4(r30)
  837  000018f4  4be00000	jr	r31
  838  000018f8  54000000	nop
  839  000018fc          	.endproc _dindex
  840  000018fc          	.align 2
  841  000018fc          	.proc _ditoa
  842  000018fc          	.global _ditoa
  843  000018fc          	_ditoa:
  844                      ;  Function 'ditoa'; 0 bytes of locals, 5 regs to save.
  845  000018fc  afbefffc	sw	-4(r29),r30; push fp
  846  00001900  001df020	add	r30,r0,r29; fp = sp
  847  00001904  afbffff8	sw	-8(r29),r31; push ret addr
  848  00001908  2fbd0020	subui	r29,r29,#32; alloc local storage
  849  0000190c  afa20000	sw	0(r29),r2
  850  00001910  afa30004	sw	4(r29),r3
  851  00001914  afa40008	sw	8(r29),r4
  852  00001918  afa5000c	sw	12(r29),r5
  853  0000191c  afa60010	sw	16(r29),r6
  854  00001920  8fc30000	lw	r3,(r30)
  855  00001924  8fc40004	lw	r4,4(r30)
  856  00001928  68610000	slti	r1,r3,#0
  857  0000192c  10200010	beqz	r1,L203_LF2
  858  00001930  54000000	nop; not filled.
  859  00001934  2006002d	addi	r6,r0,(#0x2d)&0xff
  860  00001938  08000014	j	L216_LF2
  861  0000193c  54000000	nop; not filled.
  862  00001940          	L203_LF2:
  863  00001940  64610000	snei	r1,r3,#0
  864  00001944  14200018	bnez	r1,L205_LF2
  865  00001948  54000000	nop; not filled.
  866  0000194c  20060030	addi	r6,r0,(#0x30)&0xff
  867  00001950          	L216_LF2:
  868  00001950  a0860000	sb	(r4),r6
  869  00001954  20840001	addi	r4,r4,#1
  870  00001958  0800007c	j	L204_LF2
  871  0000195c  54000000	nop; not filled.
  872  00001960          	L205_LF2:
  873  00001960  201f0001	addi	r31,r0,#1
  874  00001964  03e3082c	sle	r1,r31,r3
  875  00001968  1020001c	beqz	r1,L208_LF2
  876  0000196c  54000000	nop; not filled.
  877  00001970          	L209_LF2:
  878  00001970  53e10002	slli	r1,r31,#0x2
  879  00001974  003f0820	add	r1,r1,r31
  880  00001978  503f0001	slli	r31,r1,#0x1
  881  0000197c  03e3082c	sle	r1,r31,r3
  882  00001980  1420ffec	bnez	r1,L209_LF2
  883  00001984  54000000	nop; not filled.
  884  00001988          	L208_LF2:
  885  00001988  2005000a	addi	r5,r0,#10
  886  0000198c          	L212_LF2:
  887  0000198c  03e00035	movi2fp	f0,r31
  888  00001990  00a00835	movi2fp	f1,r5
  889  00001994  0401000f	div	f0,f0,f1
  890  00001998  0000f834	movfp2i	r31,f0
  891  0000199c  00600035	movi2fp	f0,r3
  892  000019a0  03e00835	movi2fp	f1,r31
  893  000019a4  0401000f	div	f0,f0,f1
  894  000019a8  00001034	movfp2i	r2,f0
  895  000019ac  20410030	addi	r1,r2,#48
  896  000019b0  a0810000	sb	(r4),r1
  897  000019b4  20840001	addi	r4,r4,#1
  898  000019b8  00400035	movi2fp	f0,r2
  899  000019bc  03e00835	movi2fp	f1,r31
  900  000019c0  0401000e	mult	f0,f0,f1
  901  000019c4  00000834	movfp2i	r1,f0
  902  000019c8  00611822	sub	r3,r3,r1
  903  000019cc  6fe10001	sgti	r1,r31,#1
  904  000019d0  1420ffb8	bnez	r1,L212_LF2
  905  000019d4  54000000	nop; not filled.
  906  000019d8          	L204_LF2:
  907  000019d8  20060000	addi	r6,r0,(#0x0)&0xff
  908  000019dc  a0860000	sb	(r4),r6
  909  000019e0  8fa20000	lw	r2,0(r29)
  910  000019e4  8fa30004	lw	r3,4(r29)
  911  000019e8  8fa40008	lw	r4,8(r29)
  912  000019ec  8fa5000c	lw	r5,12(r29)
  913  000019f0  8fa60010	lw	r6,16(r29)
  914  000019f4  8fdffff8	lw	r31,-8(r30)
  915  000019f8  001ee820	add	r29,r0,r30
  916  000019fc  8fdefffc	lw	r30,-4(r30)
  917  00001a00  4be00000	jr	r31
  918  00001a04  54000000	nop
  919  00001a08          	.endproc _ditoa
  920  00001a08          	.align 2
  921  00001a08          	.proc _dstrtol
  922  00001a08          	.global _dstrtol
  923  00001a08          	_dstrtol:
  924                      ;  Function 'dstrtol'; 0 bytes of locals, 5 regs to save.
  925  00001a08  afbefffc	sw	-4(r29),r30; push fp
  926  00001a0c  001df020	add	r30,r0,r29; fp = sp
  927  00001a10  afbffff8	sw	-8(r29),r31; push ret addr
  928  00001a14  2fbd0020	subui	r29,r29,#32; alloc local storage
  929  00001a18  afa20000	sw	0(r29),r2
  930  00001a1c  afa30004	sw	4(r29),r3
  931  00001a20  afa40008	sw	8(r29),r4
  932  00001a24  afa5000c	sw	12(r29),r5
  933  00001a28  afa60010	sw	16(r29),r6
  934  00001a2c  8fc20000	lw	r2,(r30)
  935  00001a30  8fc50004	lw	r5,4(r30)
  936  00001a34  8fc40008	lw	r4,8(r30)
  937  00001a38  20030000	addi	r3,r0,#0
  938  00001a3c  08000008	j	L247_LF2
  939  00001a40  54000000	nop; not filled.
  940  00001a44          	L220_LF2:
  941  00001a44  20420001	addi	r2,r2,#1
  942  00001a48          	L247_LF2:
  943  00001a48  805f0000	lb	r31,(r2)
  944  00001a4c  33e100ff	andi	r1,r31,#0x00ff
  945  00001a50  60210020	seqi	r1,r1,#32
  946  00001a54  1420ffec	bnez	r1,L220_LF2
  947  00001a58  54000000	nop; not filled.
  948  00001a5c  23e1fff7	addi	r1,r31,#-9
  949  00001a60  302100ff	andi	r1,r1,#0x00ff
  950  00001a64  70210001	sleui	r1,r1,#1
  951  00001a68  1420ffd8	bnez	r1,L220_LF2
  952  00001a6c  54000000	nop; not filled.
  953  00001a70  64a10000	snei	r1,r5,#0
  954  00001a74  10200008	beqz	r1,L222_LF2
  955  00001a78  54000000	nop; not filled.
  956  00001a7c  aca20000	sw	(r5),r2
  957  00001a80          	L222_LF2:
  958  00001a80  905f0000	lbu	r31,(r2)
  959  00001a84  67e10000	snei	r1,r31,#0
  960  00001a88  10200090	beqz	r1,L248_LF2
  961  00001a8c  54000000	nop; not filled.
  962  00001a90  63e1002d	seqi	r1,r31,#45
  963  00001a94  10200014	beqz	r1,L224_LF2
  964  00001a98  54000000	nop; not filled.
  965  00001a9c  2006ffff	addi	r6,r0,#-1
  966  00001aa0  20420001	addi	r2,r2,#1
  967  00001aa4  08000008	j	L225_LF2
  968  00001aa8  54000000	nop; not filled.
  969  00001aac          	L224_LF2:
  970  00001aac  20060001	addi	r6,r0,#1
  971  00001ab0          	L225_LF2:
  972  00001ab0  64810000	snei	r1,r4,#0
  973  00001ab4  14200054	bnez	r1,L226_LF2
  974  00001ab8  54000000	nop; not filled.
  975  00001abc  90410000	lbu	r1,(r2)
  976  00001ac0  60210030	seqi	r1,r1,#48
  977  00001ac4  10200040	beqz	r1,L227_LF2
  978  00001ac8  54000000	nop; not filled.
  979  00001acc  20420001	addi	r2,r2,#1
  980  00001ad0  905f0000	lbu	r31,(r2)
  981  00001ad4  63e10078	seqi	r1,r31,#120
  982  00001ad8  14200010	bnez	r1,L229_LF2
  983  00001adc  54000000	nop; not filled.
  984  00001ae0  63e10058	seqi	r1,r31,#88
  985  00001ae4  10200014	beqz	r1,L228_LF2
  986  00001ae8  54000000	nop; not filled.
  987  00001aec          	L229_LF2:
  988  00001aec  20040010	addi	r4,r0,#16
  989  00001af0  20420001	addi	r2,r2,#1
  990  00001af4  08000014	j	L226_LF2
  991  00001af8  54000000	nop; not filled.
  992  00001afc          	L228_LF2:
  993  00001afc  20040008	addi	r4,r0,#8
  994  00001b00  08000008	j	L226_LF2
  995  00001b04  54000000	nop; not filled.
  996  00001b08          	L227_LF2:
  997  00001b08  2004000a	addi	r4,r0,#10
  998  00001b0c          	L226_LF2:
  999  00001b0c  2081ffff	addi	r1,r4,#-1
 1000  00001b10  6c21000f	sgtui	r1,r1,#15
 1001  00001b14  10200010	beqz	r1,L233_LF2
 1002  00001b18  54000000	nop; not filled.
 1003  00001b1c          	L248_LF2:
 1004  00001b1c  00030820	add	r1,r0,r3
 1005  00001b20  080000c4	j	L245_LF2
 1006  00001b24  54000000	nop; not filled.
 1007  00001b28          	L233_LF2:
 1008  00001b28  805f0000	lb	r31,(r2)
 1009  00001b2c  23e1ffd0	addi	r1,r31,#-48
 1010  00001b30  302100ff	andi	r1,r1,#0x00ff
 1011  00001b34  70210009	sleui	r1,r1,#9
 1012  00001b38  10200014	beqz	r1,L236_LF2
 1013  00001b3c  54000000	nop; not filled.
 1014  00001b40  33e100ff	andi	r1,r31,#0x00ff
 1015  00001b44  2021ffd0	addi	r1,r1,#-48
 1016  00001b48  08000050	j	L237_LF2
 1017  00001b4c  54000000	nop; not filled.
 1018  00001b50          	L236_LF2:
 1019  00001b50  23e1ff9f	addi	r1,r31,#-97
 1020  00001b54  302100ff	andi	r1,r1,#0x00ff
 1021  00001b58  70210019	sleui	r1,r1,#25
 1022  00001b5c  10200014	beqz	r1,L238_LF2
 1023  00001b60  54000000	nop; not filled.
 1024  00001b64  33e100ff	andi	r1,r31,#0x00ff
 1025  00001b68  2021ffa9	addi	r1,r1,#-87
 1026  00001b6c  0800002c	j	L237_LF2
 1027  00001b70  54000000	nop; not filled.
 1028  00001b74          	L238_LF2:
 1029  00001b74  23e1ffbf	addi	r1,r31,#-65
 1030  00001b78  302100ff	andi	r1,r1,#0x00ff
 1031  00001b7c  70210019	sleui	r1,r1,#25
 1032  00001b80  10200014	beqz	r1,L240_LF2
 1033  00001b84  54000000	nop; not filled.
 1034  00001b88  33e100ff	andi	r1,r31,#0x00ff
 1035  00001b8c  2021ffc9	addi	r1,r1,#-55
 1036  00001b90  08000008	j	L237_LF2
 1037  00001b94  54000000	nop; not filled.
 1038  00001b98          	L240_LF2:
 1039  00001b98  200103e8	addi	r1,r0,#1000
 1040  00001b9c          	L237_LF2:
 1041  00001b9c  0024f82a	slt	r31,r1,r4
 1042  00001ba0  13e00024	beqz	r31,L246_LF2
 1043  00001ba4  54000000	nop; not filled.
 1044  00001ba8  00600035	movi2fp	f0,r3
 1045  00001bac  00800835	movi2fp	f1,r4
 1046  00001bb0  0401000e	mult	f0,f0,f1
 1047  00001bb4  00001834	movfp2i	r3,f0
 1048  00001bb8  00611820	add	r3,r3,r1
 1049  00001bbc  20420001	addi	r2,r2,#1
 1050  00001bc0  17e0ff64	bnez	r31,L233_LF2
 1051  00001bc4  54000000	nop; not filled.
 1052  00001bc8          	L246_LF2:
 1053  00001bc8  64a10000	snei	r1,r5,#0
 1054  00001bcc  10200008	beqz	r1,L244_LF2
 1055  00001bd0  54000000	nop; not filled.
 1056  00001bd4  aca20000	sw	(r5),r2
 1057  00001bd8          	L244_LF2:
 1058  00001bd8  00600035	movi2fp	f0,r3
 1059  00001bdc  00c00835	movi2fp	f1,r6
 1060  00001be0  0401000e	mult	f0,f0,f1
 1061  00001be4  00000834	movfp2i	r1,f0
 1062  00001be8          	L245_LF2:
 1063  00001be8  8fa20000	lw	r2,0(r29)
 1064  00001bec  8fa30004	lw	r3,4(r29)
 1065  00001bf0  8fa40008	lw	r4,8(r29)
 1066  00001bf4  8fa5000c	lw	r5,12(r29)
 1067  00001bf8  8fa60010	lw	r6,16(r29)
 1068  00001bfc  8fdffff8	lw	r31,-8(r30)
 1069  00001c00  001ee820	add	r29,r0,r30
 1070  00001c04  8fdefffc	lw	r30,-4(r30)
 1071  00001c08  4be00000	jr	r31
 1072  00001c0c  54000000	nop
 1073  00001c10          	.endproc _dstrtol
 1074  00001c10          	.align 2
 1075  00001c10          	.proc _bcopy
 1076  00001c10          	.global _bcopy
 1077  00001c10          	_bcopy:
 1078                      ;  Function 'bcopy'; 0 bytes of locals, 3 regs to save.
 1079  00001c10  afbefffc	sw	-4(r29),r30; push fp
 1080  00001c14  001df020	add	r30,r0,r29; fp = sp
 1081  00001c18  afbffff8	sw	-8(r29),r31; push ret addr
 1082  00001c1c  2fbd0018	subui	r29,r29,#24; alloc local storage
 1083  00001c20  afa20000	sw	0(r29),r2
 1084  00001c24  afa30004	sw	4(r29),r3
 1085  00001c28  afa40008	sw	8(r29),r4
 1086  00001c2c  8fc30000	lw	r3,(r30)
 1087  00001c30  8fc20004	lw	r2,4(r30)
 1088  00001c34  8fdf0008	lw	r31,8(r30)
 1089  00001c38  08000014	j	L259_LF2
 1090  00001c3c  54000000	nop; not filled.
 1091  00001c40          	L257_LF2:
 1092  00001c40  80640000	lb	r4,(r3)
 1093  00001c44  a0440000	sb	(r2),r4
 1094  00001c48  20630001	addi	r3,r3,#1
 1095  00001c4c  20420001	addi	r2,r2,#1
 1096  00001c50          	L259_LF2:
 1097  00001c50  001f0820	add	r1,r0,r31
 1098  00001c54  23ffffff	addi	r31,r31,#-1
 1099  00001c58  6c210000	sgti	r1,r1,#0
 1100  00001c5c  1420ffe0	bnez	r1,L257_LF2
 1101  00001c60  54000000	nop; not filled.
 1102  00001c64  8fa20000	lw	r2,0(r29)
 1103  00001c68  8fa30004	lw	r3,4(r29)
 1104  00001c6c  8fa40008	lw	r4,8(r29)
 1105  00001c70  8fdffff8	lw	r31,-8(r30)
 1106  00001c74  001ee820	add	r29,r0,r30
 1107  00001c78  8fdefffc	lw	r30,-4(r30)
 1108  00001c7c  4be00000	jr	r31
 1109  00001c80  54000000	nop
 1110  00001c84          	.endproc _bcopy
 1111  00001c84          	.align 2
 1112  00001c84          	.proc _bzero
 1113  00001c84          	.global _bzero
 1114  00001c84          	_bzero:
 1115                      ;  Function 'bzero'; 0 bytes of locals, 2 regs to save.
 1116  00001c84  afbefffc	sw	-4(r29),r30; push fp
 1117  00001c88  001df020	add	r30,r0,r29; fp = sp
 1118  00001c8c  afbffff8	sw	-8(r29),r31; push ret addr
 1119  00001c90  2fbd0010	subui	r29,r29,#16; alloc local storage
 1120  00001c94  afa20000	sw	0(r29),r2
 1121  00001c98  afa30004	sw	4(r29),r3
 1122  00001c9c  8fc20000	lw	r2,(r30)
 1123  00001ca0  8fdf0004	lw	r31,4(r30)
 1124  00001ca4  08000010	j	L270_LF2
 1125  00001ca8  54000000	nop; not filled.
 1126  00001cac          	L268_LF2:
 1127  00001cac  20030000	addi	r3,r0,(#0x0)&0xff
 1128  00001cb0  a0430000	sb	(r2),r3
 1129  00001cb4  20420001	addi	r2,r2,#1
 1130  00001cb8          	L270_LF2:
 1131  00001cb8  001f0820	add	r1,r0,r31
 1132  00001cbc  23ffffff	addi	r31,r31,#-1
 1133  00001cc0  6c210000	sgti	r1,r1,#0
 1134  00001cc4  1420ffe4	bnez	r1,L268_LF2
 1135  00001cc8  54000000	nop; not filled.
 1136  00001ccc  8fa20000	lw	r2,0(r29)
 1137  00001cd0  8fa30004	lw	r3,4(r29)
 1138  00001cd4  8fdffff8	lw	r31,-8(r30)
 1139  00001cd8  001ee820	add	r29,r0,r30
 1140  00001cdc  8fdefffc	lw	r30,-4(r30)
 1141  00001ce0  4be00000	jr	r31
 1142  00001ce4  54000000	nop
 1143  00001ce8          	.endproc _bzero
 1144                      ;;; Ethan L. Miller, 1999.  Released to the public domain
 1145                      ;;;
 1146                      ;;; Most of the traps are called in files from libtraps.
 1149  00001ce8          	.align 2
 1150  00001ce8          	.proc _exit
 1151  00001ce8          	.global _exit
 1152  00001ce8          	_exit:
 1153  00001ce8  44000300	trap	#0x300
 1154  00001cec  4be00000	jr	r31
 1155  00001cf0  54000000	nop
 1156  00001cf4          	.endproc _exit
 1158                      ; for the benefit of gcc.
 1159  00001cf4          	.proc ___main
 1160  00001cf4          	.global ___main
 1161  00001cf4          	___main:
 1162  00001cf4  4be00000	jr	r31
 1163  00001cf8  54000000	nop
 1164  00001cfc          	.endproc ___main
 1165  00001cfc          	.text
 1166  00001cfc          	.global _etext
 1167  00001cfc          	_etext:
 1168  00001cfc          	.align 3
 1169  00001d00          	.data
 1170  0000207e          	.global _edata
 1171  0000207e          	_edata:
